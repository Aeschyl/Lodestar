using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Http.Formatting;
using System.Threading.Tasks;

namespace FBLACodingAndProgramming2021_2022.Geocoding
{
    using global::Geocoding;
    using global::Geocoding.Microsoft;
    
    using QuickType;
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var request = Request.FromJson(jsonString);

    namespace QuickType
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class Request
        {
            [JsonProperty("type")]
            public string Type { get; set; }

            [JsonProperty("query")]
            public List<string> Query { get; set; }

            [JsonProperty("features")]
            public List<Feature> Features { get; set; }

            [JsonProperty("attribution")]
            public string Attribution { get; set; }
        }

        public partial class Feature
        {
            [JsonProperty("id")]
            public string Id { get; set; }

            [JsonProperty("type")]
            public string Type { get; set; }

            [JsonProperty("place_type")]
            public List<string> PlaceType { get; set; }

            [JsonProperty("relevance")]
            public double Relevance { get; set; }

            [JsonProperty("properties")]
            public Properties Properties { get; set; }

            [JsonProperty("text")]
            public string Text { get; set; }

            [JsonProperty("place_name")]
            public string PlaceName { get; set; }

            [JsonProperty("center")]
            public List<double> Center { get; set; }

            [JsonProperty("geometry")]
            public Geometry Geometry { get; set; }

            [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
            [JsonConverter(typeof(ParseStringConverter))]
            public long? Address { get; set; }

            [JsonProperty("context")]
            public List<Context> Context { get; set; }

            [JsonProperty("matching_text", NullValueHandling = NullValueHandling.Ignore)]
            public string MatchingText { get; set; }

            [JsonProperty("matching_place_name", NullValueHandling = NullValueHandling.Ignore)]
            public string MatchingPlaceName { get; set; }
        }

        public partial class Context
        {
            [JsonProperty("id")]
            public string Id { get; set; }

            [JsonProperty("text")]
            public string Text { get; set; }

            [JsonProperty("wikidata", NullValueHandling = NullValueHandling.Ignore)]
            public string Wikidata { get; set; }

            [JsonProperty("short_code", NullValueHandling = NullValueHandling.Ignore)]
            public string ShortCode { get; set; }
        }

        public partial class Geometry
        {
            [JsonProperty("type")]
            public string Type { get; set; }

            [JsonProperty("coordinates")]
            public List<double> Coordinates { get; set; }

            [JsonProperty("interpolated", NullValueHandling = NullValueHandling.Ignore)]
            public bool? Interpolated { get; set; }

            [JsonProperty("omitted", NullValueHandling = NullValueHandling.Ignore)]
            public bool? Omitted { get; set; }
        }

        public partial class Properties
        {
            [JsonProperty("accuracy")]
            public string Accuracy { get; set; }
        }

        public partial class Request
        {
            public static Request FromJson(string json) => JsonConvert.DeserializeObject<Request>(json, QuickType.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this Request self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                    return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }
    }

    class Geocoder
    {
        
        public static async Task<string> GetCoordinatesAsync(string adress) 
        {
            IGeocoder geocoder = new BingMapsGeocoder("qc9Y7SHHRgYbev4fUy0q~ZgF6eo0fD9ieP3VnKoDX_Q~AnM4TYqGE82d-jah6trRCttSyWK53fdPmYnyOjGbcYfmD61QQYzwoRH2oNJN9AZG");
            IEnumerable<Address> addresses = geocoder.Geocode(adress);

            return addresses.First().Coordinates.Latitude + ", " + addresses.First().Coordinates.Longitude;
        }
        
    }
}
